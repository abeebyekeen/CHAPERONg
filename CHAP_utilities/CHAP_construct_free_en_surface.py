
# CHAP_construct_free_en_surface.py -- A python script to construct and
#   plot a free energy surface from a pair of ordered parameters
# Part of the CHAPERONg suite of scripts
# Input parameters are generated by other scripts in CHAPERONg and
#   are read by this script
# CHAPERONg -- An automation program for GROMACS md simulation
# Author -- Abeeb A. Yekeen
# Contact -- yekeenaa@mail.ustc.edu.cn, abeeb.yekeen@hotmail.com
# Date: 2022.10.16


from matplotlib import pyplot as plt
import math
import time
import numpy as np
from mpl_toolkits.axes_grid1 import make_axes_locatable


#reading in parameters for FES calculations
print (" Reading in parameters for FES calculations"+"\n")
with open("CHAP_fes_Par.in") as Inpar:
	for parameter in Inpar.readlines():
		if "minPar1" in parameter:
			paraData = str(parameter).split(",")
			Para1min = float(paraData[1])
		elif "maxPar1" in parameter:
			paraData = str(parameter).split(",")
			Para1max = float(paraData[1])
		elif "minPar2" in parameter:
			paraData = str(parameter).split(",")
			Para2min = float(paraData[1])
		elif "maxPar2" in parameter:
			paraData = str(parameter).split(",")
			Para2max = float(paraData[1])
		elif "XaxisL" in parameter:
			paraData = parameter.rstrip('\n').split(",")
			XaxisLabel = str(paraData[1])
		elif "YaxisL" in parameter:
			paraData = parameter.rstrip('\n').split(",")
			YaxisLabel = str(paraData[1])
		elif "no_of_frames" in parameter:
			paraData = str(parameter).split(",")
			no_of_frames = int(paraData[1])
		elif "Temp" in parameter:
			paraData = str(parameter).split(",")
			Temp = float(paraData[1])
		elif "outFilename" in parameter:
			paraData = parameter.rstrip('\n').split(",")
			outFilename = str(paraData[1])+str(".png")
		elif "plotTitle" in parameter:
			paraData = parameter.rstrip('\n').split(",")
			plotTitle = str(paraData[1])+str(" Free Energy Surface")

# Range of data from order parameters
dPara1 = Para1max - Para1min
dPara2 = Para2max - Para2min

# Initialize the order parameter lists
OrderP1 = []
OrderP2 = []

print (" Reading in data of order parameters"+"\n")
# Read in data of order parameters
with open("OrderParameterPair.dat") as alldata:
	alldataLines = alldata.readlines()
	for line in alldataLines:
		dataPoint = str(line).split(",")
		OrderP1.append(float(dataPoint[0]))
		OrderP2.append(float(dataPoint[1]))
time.sleep(2)

print (" Binning and generating a 2D histogram"+"\n")
# Determine the number of bins to use
num_of_bins = int(math.floor(math.sqrt(no_of_frames)))
if num_of_bins%2 != 0:
	num_of_bins += 1

xbin = num_of_bins
ybin = num_of_bins

# Create a 2D histogram using the numpy histogram2d function
hist, x_edges, y_edges = np.histogram2d(OrderP1, OrderP2, bins=(xbin, ybin), range=[[Para1min, Para1max], [Para2min, Para2max]])
time.sleep(2)

print (" Identifying the highest probability bin"+"\n")
# Flatten the 2D histogram into a 1D array
Prob = hist.flatten()

# Identify the most populated bin
max_bin = np.max(Prob)
time.sleep(2)

# constant -> product a kilocal conversion factor, Avogadro's number, Boltzmann constant & temperature
RT = -0.001 * 6.02214E23 * 3.29763E-24 * Temp

print (" Calculating delta_G values by Boltzmann inversion of the histogram"+"\n")

# Initialize the dG array
dG = np.zeros((xbin,ybin))

# Estimate dG values using Boltzmann inversion
with open("OrderParameters1_2_dG.dat", "w") as dGoutFile:
	for x in range(xbin):
		for y in range(ybin):
			if hist[x][y] == 0:
				dG[x][y] = 10
				dGoutFile.write((f"{(2*Para1min+(2*x+1)*dPara1/xbin)/2}\t{(2*Para2min+(2*y+1)*dPara2/ybin)/2}\t{dG[x][y]}\n"))
				continue
			else:
				dG[x][y] = RT*(np.log(hist[x][y]) - np.log(max_bin))
				dGoutFile.write((f"{(2*Para1min+(2*x+1)*dPara1/xbin)/2}\t{(2*Para2min+(2*y+1)*dPara2/ybin)/2}\t{dG[x][y]}\n"))
				dGoutFile.write("\n")
time.sleep(2)

print (" Generating and saving FES plot")
# Plot figure
plt.figure()
ax = plt.gca()
im = ax.imshow(dG.T, origin='lower', aspect='auto', cmap="gnuplot", extent=[Para1min,Para1max,Para2min,Para2max])
plt.title(plotTitle)
ax.set_xlabel(XaxisLabel)
ax.set_ylabel(YaxisLabel)
cbar = plt.colorbar(im, cax=(make_axes_locatable(ax).append_axes("right", size="2.5%", pad=0.1)))
cbar.set_label(r'$\Delta G$'+' (kcal/mol)', size=12)
plt.savefig(outFilename,dpi=600)
time.sleep(2)