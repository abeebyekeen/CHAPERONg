
# CHAP_construct_free_en_surface.py -- A python script to construct and
#   plot a free energy surface from a pair of ordered parameters
# Part of the CHAPERONg suite of scripts
# Input parameters are generated by other scripts in CHAPERONg and
#   are read by this script
# CHAPERONg -- An automation program for GROMACS md simulation
# Author -- Abeeb A. Yekeen
# Contact -- yekeenaa@mail.ustc.edu.cn, abeeb.yekeen@hotmail.com
# Date: 2022.10.16


from matplotlib import pyplot as plt
import math
import numpy as np
from matplotlib import cm as cm
from mpl_toolkits.axes_grid1 import make_axes_locatable


#reading in parameters for FES calculations
print (" Reading in parameters for FES calculations"+"\n")
with open("CHAP_fes_Par.in") as Inpar:
	for parameter in Inpar.readlines():
		if "minPar1" in parameter:
			paraData = str(parameter).split(",")
			Para1min = float(paraData[1])
		elif "maxPar1" in parameter:
			paraData = str(parameter).split(",")
			Para1max = float(paraData[1])
		elif "minPar2" in parameter:
			paraData = str(parameter).split(",")
			Para2min = float(paraData[1])
		elif "maxPar2" in parameter:
			paraData = str(parameter).split(",")
			Para2max = float(paraData[1])
		elif "XaxisL" in parameter:
			paraData = parameter.rstrip('\n').split(",")
			XaxisL = str(paraData[1])
		elif "YaxisL" in parameter:
			paraData = parameter.rstrip('\n').split(",")
			YaxisL = str(paraData[1])
		elif "xbin" in parameter:
			paraData = str(parameter).split(",")
			xbin = int(paraData[1])
		elif "ybin" in parameter:
			paraData = str(parameter).split(",")
			ybin = int(paraData[1])
		elif "Temp" in parameter:
			paraData = str(parameter).split(",")
			Temp = float(paraData[1])
		elif "outFilename" in parameter:
			paraData = parameter.rstrip('\n').split(",")
			outFilename = str(paraData[1])+str(".png")
		elif "plotTitle" in parameter:
			paraData = parameter.rstrip('\n').split(",")
			plotTitle = str(paraData[1])+str(" Free Energy Surface")

#range of data from order parameters
dPara1 = Para1max - Para1min
dPara2 = Para2max - Para2min

#initiating the order parameter lists
OrderP1 = []
OrderP2 = []

print (" Reading in data of order parameters"+"\n")
#reading in data of order parameters
with open("OrderParameterPair.dat") as alldata:
	alldataLines = alldata.readlines()
	for lineNo, line in enumerate(alldataLines):
		##using enumerate to map each line of the file to
		##it's line_number starting line number from zero
		dataPoint = str(line).split(",")
		OrderP1.append(float(dataPoint[0]))
		OrderP2.append(float(dataPoint[1]))
#initiating probability and dG arrays
Probb = np.zeros((xbin,ybin))
dG = np.zeros((xbin,ybin))

print (" Calculating probability of given combination of data points"+"\n")
#calculate probabilities
for value in range(lineNo+1):
	for x in range(xbin):
		if OrderP1[value] > (Para1min+x*dPara1/xbin) and OrderP1[value] <= (Para1min+(x+1)*dPara1/xbin):
			for y in range(ybin):
				if  OrderP2[value] > (Para2min+y*dPara2/ybin) and OrderP2[value] <= (Para2min+(y+1)*dPara2/ybin):
					Probb[x][y] = Probb[x][y] + 1
					break
			break

#maximum probability
#P_list = []
P_list = list()
for x in range(xbin):
	for y in range(ybin):
		P_list.append(Probb[x][y])
ProbMax = max(P_list)

#constant
RT = Temp * -0.001 * 6.02214E23 * 3.29763E-24

print (" Calculating delta_G values"+"\n")
#estimating dG values
with open("OrderParameters1_2_dG.dat", "w") as dGoutFile:
	for x in range(xbin):
		for y in range(ybin):
			if Probb[x][y] == 0:
				dG[x][y] = 10
				dGoutFile.write((str((2*Para1min+(2*x+1)*dPara1/xbin)/2) + "\t" + str((2*Para2min+(2*y+1)*dPara2/ybin)/2) + "\t" + str(dG[x][y])+"\n"))
				continue
			else:
				dG[x][y] = RT*(math.log(Probb[x][y]) - math.log(ProbMax))
				dGoutFile.write((str((2*Para1min+(2*x+1)*dPara1/xbin)/2) + "\t" + str((2*Para2min+(2*y+1)*dPara2/ybin)/2) + "\t" + str(dG[x][y])+"\n"))
				dGoutFile.write("\n")

print (" Generating and saving FES plot")
#generating figure
ZaxisL = r'$\Delta G$'+' (kcal/mol)'
plt.figure()
ax = plt.gca()
im = ax.imshow(dG.T, origin='lower', aspect='auto', cmap=cm.gnuplot, extent=[Para1min,Para1max,Para2min,Para2max])
plt.title(plotTitle)
plt.xlabel(XaxisL)
plt.ylabel(YaxisL)
divider = make_axes_locatable(ax)
cax = divider.append_axes("right", size="2%", pad=0.05)
cbar = plt.colorbar(im, cax=cax)
cbar.set_label(ZaxisL,size=12)
plt.savefig(outFilename,dpi=600)
